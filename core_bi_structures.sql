--VISTE MEDICHE/CLINICHE

--MONITORAGGIO PARAMETRI VITALI RECENTI
--Mostra l’ultimo valore dei segni vitali per ciascun paziente.

CREATE OR REPLACE VIEW CORE.VW_LAST_VITAL_SIGNS AS
SELECT vs.PATIENT_ID, 
       vs.DATE, 
       vs.SOURCE_TS AS LAST_UPDATE,
       vs.HEART_RATE,
       vs.SPO2,
       vs.TEMPERATURE,
       vs.SOURCE
FROM (
  SELECT *,
         ROW_NUMBER() OVER (PARTITION BY PATIENT_ID ORDER BY DATE DESC) AS rn
  FROM SNOWFLAKE_LEARNING_DB.CORE.VITAL_SIGNS_CONSOLIDATED
) vs
WHERE vs.rn = 1
;

--  TERAPIE SOMMINISTRATE DURANTE I RECOVERI
-- Unione tra ricoveri e prescrizioni

CREATE OR REPLACE VIEW CORE.VW_PRESCRIPTIONS_DETAIL AS
SELECT
  h.PATIENT_ID,
  h.ADMISSION_ID,
  h.ADMISSION_DATE,
  h.DISCHARGE_DATE,
  p.DRUG,
  p.DOSE,
  p.ROUTE,
  p.FREQUENCY,
  p.START_DATE,
  p.END_DATE
FROM SNOWFLAKE_LEARNING_DB.CORE.HOSPITAL_ADMISSIONS h
JOIN SNOWFLAKE_LEARNING_DB.CORE.PRESCRIPTIONS p
  ON h.ADMISSION_ID = p.ADMISSION_ID
  ;

-- NUMERO DI PROTOCOLLI MEDICI SEGUITI
-- Per analizzare la frequenza delle procedure cliniche:

CREATE OR REPLACE VIEW CORE.VW_PROCEDURE_STATS AS
SELECT
  PROCEDURE_NAME,
  COUNT(*) AS NUM_OCCURRENCES
FROM SNOWFLAKE_LEARNING_DB.CORE.PROCEDURES
GROUP BY PROCEDURE_NAME
ORDER BY NUM_OCCURRENCES DESC
;

--VISTE ECONOMICO/AMMINISTRATIVE

-- FATTURE PER REPARTO
-- Insight economico per reparto e tipo fattura

CREATE OR REPLACE VIEW CORE.VW_REPARTO_INVOICES_SUMMARY AS
SELECT
  REPARTO,
  TIPO_FATTURA,
  COUNT(*) AS NUM_FATTURE,
  SUM(IMPORTO) AS TOTALE_IMPORTO
FROM SNOWFLAKE_LEARNING_DB.CORE.INVOICES
GROUP BY REPARTO, TIPO_FATTURA
;

-- SPESA MEDIA PER RICOVERO
-- Calcola la media dei costi di ricovero

CREATE OR REPLACE VIEW CORE.VW_AVG_COST_PER_ADMISSION AS
SELECT
  DEPARTMENT,
  COUNT(*) AS NUM_RICOVERI,
  ROUND(AVG(COSTO_TOTALE), 2) AS COSTO_MEDIO
FROM SNOWFLAKE_LEARNING_DB.CORE.HOSPITAL_ADMISSIONS
GROUP BY DEPARTMENT
;

-- FATTURATO PER PAZIENTE
-- Collega fatture ai pazienti e somma l’importo

CREATE OR REPLACE VIEW CORE.VW_PATIENT_BILLING_SUMMARY AS
SELECT
  p.PATIENT_ID,
  COUNT(i.INVOICE_ID) AS NUM_FATTURE,
  SUM(i.IMPORTO) AS TOTALE_SPESA
FROM SNOWFLAKE_LEARNING_DB.CORE.PATIENTS p
JOIN SNOWFLAKE_LEARNING_DB.CORE.INVOICES i
  ON p.PATIENT_ID = i.PAZIENTE_ID
GROUP BY p.PATIENT_ID
;

-- VISTE GESTIONALI

-- DURATA MEDIA DEI RICOVERI PER REPARTO
-- Per valutare l'efficienza e durata media di degenza

CREATE OR REPLACE VIEW CORE.VW_AVG_LENGTH_OF_STAY AS
SELECT
  DEPARTMENT,
  COUNT(*) AS NUM_RICOVERI,
  ROUND(AVG(DATEDIFF('DAY', ADMISSION_DATE, DISCHARGE_DATE)), 2) AS DURATA_MEDIA_GIORNI
FROM SNOWFLAKE_LEARNING_DB.CORE.HOSPITAL_ADMISSIONS
WHERE DISCHARGE_DATE IS NOT NULL
GROUP BY DEPARTMENT
;

-- ESITI CLINICI PER REPARTO
-- Classifica degli esiti (guarigione, trasferimento, decesso...) per reparto

CREATE OR REPLACE VIEW CORE.VW_OUTCOME_STATS AS
SELECT
  DEPARTMENT,
  OUTCOME,
  COUNT(*) AS NUM_CASI
FROM SNOWFLAKE_LEARNING_DB.CORE.HOSPITAL_ADMISSIONS
GROUP BY DEPARTMENT, OUTCOME
ORDER BY DEPARTMENT, NUM_CASI DESC
;

-- TASSO DI PRESCRIZIONE DI FARMACI PER REPARTO
-- Per verificare l'intensità terapeutica
CREATE OR REPLACE VIEW CORE.VW_DRUG_USAGE_BY_DEPARTMENT AS
SELECT
  h.DEPARTMENT,
  COUNT(p.ID) AS NUM_PRESCRIZIONI
FROM SNOWFLAKE_LEARNING_DB.CORE.HOSPITAL_ADMISSIONS h
JOIN SNOWFLAKE_LEARNING_DB.CORE.PRESCRIPTIONS p
  ON h.ADMISSION_ID = p.ADMISSION_ID
GROUP BY h.DEPARTMENT
;

-- DASHBOARD UNIFICATA PER DATI CLINICO/AMMINISTRATIVI PER PAZIENTE
CREATE OR REPLACE VIEW CORE.VW_DASHBOARD_HOSPITAL_OVERVIEW AS
SELECT
  h.PATIENT_ID,
  p.NOME,
  p.COGNOME,
  h.ADMISSION_ID,
  h.DEPARTMENT,
  h.ADMISSION_DATE,
  h.DISCHARGE_DATE,
  h.DIAGNOSIS,
  h.OUTCOME,
  h.COSTO_TOTALE,
  i.IMPORTO AS ULTIMA_FATTURA,
  v.HEART_RATE,
  v.SPO2,
  v.TEMPERATURE,
  v.DATE AS VITAL_DATE
FROM SNOWFLAKE_LEARNING_DB.CORE.HOSPITAL_ADMISSIONS h
LEFT JOIN SNOWFLAKE_LEARNING_DB.CORE.PATIENTS p
  ON h.PATIENT_ID = p.PATIENT_ID
LEFT JOIN (
  SELECT *,
         ROW_NUMBER() OVER (PARTITION BY PAZIENTE_ID ORDER BY DATA_FATTURA DESC) AS rn
  FROM SNOWFLAKE_LEARNING_DB.CORE.INVOICES
) i ON i.PAZIENTE_ID = h.PATIENT_ID AND i.rn = 1
LEFT JOIN (
  SELECT *,
         ROW_NUMBER() OVER (PARTITION BY PATIENT_ID ORDER BY DATE DESC) AS rn
  FROM SNOWFLAKE_LEARNING_DB.CORE.VITAL_SIGNS_CONSOLIDATED
) v ON v.PATIENT_ID = h.PATIENT_ID AND v.rn = 1
;